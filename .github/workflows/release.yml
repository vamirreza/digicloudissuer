name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog between tags
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: Release ${{ steps.get_version.outputs.tag_name }}
        body: |
          ## Changes in ${{ steps.get_version.outputs.tag_name }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Using kubectl
          ```bash
          kubectl apply -f https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.tag_name }}/digicloud-issuer.yaml
          ```
          
          ### Using Docker
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.tag_name }}
          ```
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.tag_name, '-') }}

  build-and-push:
    name: Build and Push Release Image
    runs-on: ubuntu-latest
    needs: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  generate-manifests:
    name: Generate Release Manifests
    runs-on: ubuntu-latest
    needs: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Download dependencies
      run: go mod download

    - name: Generate manifests
      run: |
        make manifests
        
        # Update image tag in deployment
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.tag_name }}|" config/manager/manager.yaml
        
        # Create combined manifest
        mkdir -p release-manifests
        
        # Combine all manifests into a single file
        echo "# Digicloud Issuer - ${{ needs.release.outputs.tag_name }}" > release-manifests/digicloud-issuer.yaml
        echo "# Generated on $(date)" >> release-manifests/digicloud-issuer.yaml
        echo "---" >> release-manifests/digicloud-issuer.yaml
        
        # Add CRDs
        cat config/crd/bases/*.yaml >> release-manifests/digicloud-issuer.yaml
        echo "---" >> release-manifests/digicloud-issuer.yaml
        
        # Add RBAC
        cat config/rbac/*.yaml >> release-manifests/digicloud-issuer.yaml
        echo "---" >> release-manifests/digicloud-issuer.yaml
        
        # Add manager
        cat config/manager/*.yaml >> release-manifests/digicloud-issuer.yaml
        
        # Create tarball
        tar -czf digicloud-issuer-${{ needs.release.outputs.tag_name }}.tar.gz -C release-manifests .

    - name: Upload Release Manifests
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./digicloud-issuer-${{ needs.release.outputs.tag_name }}.tar.gz
        asset_name: digicloud-issuer-${{ needs.release.outputs.tag_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Combined Manifest
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./release-manifests/digicloud-issuer.yaml
        asset_name: digicloud-issuer.yaml
        asset_content_type: text/plain

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, build-and-push, generate-manifests]
    if: always()
    steps:
    - name: Notify success
      if: needs.build-and-push.result == 'success' && needs.generate-manifests.result == 'success'
      run: |
        echo "✅ Release ${{ needs.release.outputs.tag_name }} completed successfully!"
        echo "Docker images have been pushed to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Release artifacts are available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag_name }}"

    - name: Notify failure
      if: needs.build-and-push.result == 'failure' || needs.generate-manifests.result == 'failure'
      run: |
        echo "❌ Release ${{ needs.release.outputs.tag_name }} failed!"
        exit 1
