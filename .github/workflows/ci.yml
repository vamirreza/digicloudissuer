name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: make build

    - name: Run tests
      run: make test

    - name: Check code generation
      run: |
        make generate manifests
        git diff --exit-code

    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  build-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-manifests:
    name: Generate and Validate Manifests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Generate manifests
      run: make manifests

    - name: Validate manifests with kubeval
      run: |
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin
        find config -name "*.yaml" -exec kubeval {} \;

    - name: Upload manifests as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kubernetes-manifests
        path: config/

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: test-cluster
        kubectl_version: v1.28.0

    - name: Install cert-manager
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
        kubectl wait --for=condition=Ready pods --all -n cert-manager --timeout=300s

    - name: Load Docker image into Kind
      run: |
        IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker pull $IMAGE_TAG
        kind load docker-image $IMAGE_TAG --name test-cluster

    - name: Deploy CRDs and RBAC
      run: |
        kubectl apply -f config/crd/bases/
        kubectl apply -f config/rbac/

    - name: Deploy issuer
      run: |
        # Update deployment image
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" config/manager/manager.yaml
        kubectl apply -f config/manager/

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=Available deployment/digicloud-issuer-controller-manager -n digicloud-issuer-system --timeout=300s

    - name: Run integration tests
      run: |
        # Apply test manifests
        kubectl apply -f examples/
        # Add specific integration test commands here
        kubectl get pods -A

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, security, build-image]
    if: github.event_name == 'release'
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Generate release manifests
      run: |
        make manifests
        # Create release bundle
        mkdir -p release/
        cp -r config/ release/
        tar -czf digicloud-issuer-${{ github.event.release.tag_name }}.tar.gz -C release .

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./digicloud-issuer-${{ github.event.release.tag_name }}.tar.gz
        asset_name: digicloud-issuer-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Update latest tag
      run: |
        git tag -f latest
        git push -f origin latest
