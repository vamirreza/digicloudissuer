name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run gofmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -s -l .
          echo "Please run 'gofmt -s -w .' to fix formatting"
          exit 1
        fi

    - name: Check go mod tidy
      run: |
        go mod tidy
        if ! git diff --quiet go.mod go.sum; then
          echo "go.mod or go.sum is not tidy"
          git diff go.mod go.sum
          exit 1
        fi

    - name: Check for suspicious constructs
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

    - name: Check for ineffectual assignments
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...

    - name: Check for misspellings
      run: |
        go install github.com/client9/misspell/cmd/misspell@latest
        misspell -error .

    - name: Check for unused code
      run: |
        go install golang.org/x/tools/cmd/deadcode@latest
        deadcode ./...

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Download dependencies
      run: go mod download

    - name: Check for known vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Audit dependencies
      run: |
        go list -json -m all | go run golang.org/x/vuln/cmd/govulncheck@latest -mode=package -

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for missing package documentation
      run: |
        go install golang.org/x/lint/golint@latest
        for pkg in $(go list ./...); do
          if [ -z "$(golint $pkg | grep 'should have comment')" ]; then
            continue
          else
            echo "Missing package documentation in $pkg"
            golint $pkg | grep 'should have comment'
          fi
        done

    - name: Validate README
      run: |
        if [ ! -f README.md ]; then
          echo "README.md is missing"
          exit 1
        fi
        if [ $(wc -l < README.md) -lt 10 ]; then
          echo "README.md seems too short"
          exit 1
        fi

    - name: Check for TODO/FIXME comments
      run: |
        TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.go" . | wc -l)
        if [ $TODO_COUNT -gt 5 ]; then
          echo "Found $TODO_COUNT TODO/FIXME comments. Consider addressing them:"
          grep -r "TODO\|FIXME" --include="*.go" .
        fi

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for license headers
      run: |
        # Check if source files have proper license headers
        MISSING_LICENSE=0
        for file in $(find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*"); do
          if ! head -n 10 "$file" | grep -q "Licensed under\|Copyright\|SPDX-License"; then
            echo "Missing license header in $file"
            MISSING_LICENSE=$((MISSING_LICENSE + 1))
          fi
        done
        
        if [ $MISSING_LICENSE -gt 0 ]; then
          echo "Found $MISSING_LICENSE files missing license headers"
          echo "Consider adding license headers to your source files"
        fi

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Run benchmarks
      run: |
        # Run benchmarks if they exist
        if ls *_test.go 1> /dev/null 2>&1; then
          if grep -q "Benchmark" *_test.go; then
            go test -bench=. -benchmem ./...
          else
            echo "No benchmarks found"
          fi
        else
          echo "No test files found"
        fi

